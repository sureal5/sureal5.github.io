<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>反射</title>
      <link href="/2023/02/12/%E5%8F%8D%E5%B0%84/"/>
      <url>/2023/02/12/%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/2023/02/11/test/"/>
      <url>/2023/02/11/test/</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程基础"><a href="#网络编程基础" class="headerlink" title="网络编程基础"></a>网络编程基础</h1><h3 id="什么是网络编程"><a href="#什么是网络编程" class="headerlink" title="什么是网络编程"></a>什么是网络编程</h3><p>​在网络通信协议下，在不同的计算机下进行数据传输</p><h3 id="网络编程的三要素"><a href="#网络编程的三要素" class="headerlink" title="网络编程的三要素"></a>网络编程的三要素</h3><p><strong>ip地址</strong>： 在网络中计算机的标识号</p><p><strong>端口</strong>： 区分计算机中的不同的应用程序</p><p><strong>协议</strong>： 在同一个网络的计算机进行连接时，必须要遵循某一规则，即协议</p><h3 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h3><p>类别：ipv4、ipv6</p><p>ipv4：即ip地址，由网络上分配的长度为32bit的地址来表示ip。这32bit每8位.一组表示一个数据，例如<code>01111111.00000000.00000000.00000001</code>表示本机地址：127.0.0.1。</p><p>ipv6:  随着越来越多设备接入网络，导致地址分配越来越紧张，故加长分配长度由32bit到128bit。改进后的地址称为ipv6。</p><p>使用java获取本机的ip和设备名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ipAddress</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException &#123;</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;DESKTOP-B8L353L&quot;</span>);</span><br><span class="line">        <span class="comment">//获取ip地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">hostAddress</span> <span class="operator">=</span> address.getHostAddress();</span><br><span class="line">        <span class="comment">//获取主机名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">hostName</span> <span class="operator">=</span> address.getHostName();</span><br><span class="line">        System.out.println(<span class="string">&quot;主机名:&quot;</span>+hostName);</span><br><span class="line">        System.out.println(<span class="string">&quot;ip:&quot;</span> + hostAddress);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="端口和协议"><a href="#端口和协议" class="headerlink" title="端口和协议"></a>端口和协议</h3><p>包括：端口、端口号、协议、udp协议、tcp协议</p><p>端口：设备上的应用程序的标识</p><p>端口号：区分不同应用程序的端口，用两个字节表示，范围是0<del>65535，其中0</del>1023用于一些重要的网络服务和应用，其余的表示普通应用程序。如果端口被占用，会导致应用启动失败。</p><p>协议：网络连接和通信的规则</p><p>udp协议（user datagram protocol）：称为用户数据报协议，该协议在进行数据传输时不会构建逻辑结构（不检验接收端是否存在，同时接收后不会做出回应），则使得传输速度较快，消耗系统资源小，但有时不能保证数据的完整性。</p><p>tcp协议：（transmission control protocol）: 称为传输控制协议，该协议在进行数据传输时会建立逻辑结构，确保数据传输的准确性。</p><p>下图为数据传输的逻辑结构</p><p><img src="https://s2.loli.net/2023/02/11/pbmZrPOwjGNl3dE.png" alt="网络编程图一"></p><p>在完成上述的连接后，客户端可与服务器进行数据传输，tcp协议可以保住数据传输的安全性。</p><h3 id="UDP发射程序"><a href="#UDP发射程序" class="headerlink" title="UDP发射程序"></a>UDP发射程序</h3><p>依据udp协议发送数据和接收数据</p><p>发送数据的步骤：</p><ul><li>用DatagramScoket创建发送端对象（socket）</li><li>创建数据，用字节数组打包</li><li>调用DatagramScoket对象的方法，发送数据</li><li>关闭发送端</li></ul><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建socket对象</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">        <span class="comment">//创建要发送的数据</span></span><br><span class="line">        <span class="type">byte</span> [] by = <span class="string">&quot;hello,this is sending&quot;</span>.getBytes();</span><br><span class="line">        <span class="comment">//使用DatagremPacket将数据打包</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(by,by.length, InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>),<span class="number">11111</span>);</span><br><span class="line">        <span class="comment">//调用DatagramSocket对象的方法发送数据</span></span><br><span class="line">        socket.send(dp);</span><br><span class="line">        <span class="comment">//关闭发送端</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接收数据步骤</p><ul><li>用DatagramScoket创建接收端对象（socket）</li><li>创建数据包，用于接收数据</li><li>调用DatagramScoket对象的方法，接收数据</li><li>关闭接收端</li></ul><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建发送端相同端口号的socket对象</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">11111</span>);</span><br><span class="line">        <span class="type">byte</span> [] by = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(by,by.length);</span><br><span class="line">        <span class="comment">//接收发来的数据</span></span><br><span class="line">        socket.receive(dp);</span><br><span class="line">        System.out.println(<span class="string">&quot;数据是：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(dp.getData(),<span class="number">0</span>,dp.getLength()));</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何创建一个个人博客（免费）</title>
      <link href="/2023/02/02/My-New-Post/"/>
      <url>/2023/02/02/My-New-Post/</url>
      
        <content type="html"><![CDATA[<p>本文依据<a href="https://zhuanlan.zhihu.com/p/60578464">此文</a><br>搭建基于hexo+github的博客页面，在此文的基础上编写一些注意事项：</p><p>1、注意在执行命令时应该在桌面的blog文件下打开 git bash</p><p>2、修改_config.yml文件的deployment部分，修改为如下部分：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"> <span class="attr">repository:</span> <span class="string">https://github.com/这填自己的用户名/这填自己的用户名.github.io.git</span></span><br><span class="line"> <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>先写以上这些，有空在补充</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
